_- 1) when working on a project try to really understand what you are working on and little by little it will click even if you have to seek help but give it a try.
_- in here we are starting with the expensesOutput and we'd recive a prop for the expenses and for that we know expenses will be an array of numbers or object{expenses} where every array represents an expense and an expense is not just a number it has a date(number/strings) title description maybe and id etc, and for the summary a short description is needed so now we know how to write the first logic
.reduce() => is a javascript method that's executed on arrays which allows us to combine multipule values in an array into a single value

- it's important to note that when trying to navigate from a screen that isn't regisered as a screen we use a hook(useNavigation)
  Another way to use the screensoption(in this project to navigate to another screen because it's a registered screen), is to use it as a function that way it recives the navigation props and we then use the navigate option in where we want.
  \*we can update the options of a screen from inside that screen, with the help of the navigation prop(provided it is a registered screen) with the navigation.setOptions({}) and it is adviced to use this inside of a useLayoutEffect as to aviod lagging when used alone or with useEffect \*

* a safe way of drilling into an objects that's defined is to use the conditional operator(?)
* if you ever want to apply an extra setting using a prop, once its called as an argument you also declear it as a prop in the component before calling it in the component you want to add an extra style etc
** diffifulty(Hard)- context, when using context we first import it and then we sore ur first value in a variable (ExpensesContext) and also add the export in order for us to use in other files, which we need to do in order to access the context from inside other components.
for the next step we pass an initial value to createContext()(which is not used as an initial value but as a default value which will help with auto completion when used in other components) and then add functions that will be used to update the expenses array
we then write a fucntion for the state logic below it, in it we use the useReducer() [ useReducer is like getting a special helper (the Toy Box Manager) and giving them a rule book (the reducer) so that you can just give simple instructions (dispatch actions) to change the toys in your box (update the state) without having to do all the tricky work yourself each time.
It's super helpful when you have lots of different ways you want to change the toys, or if changing one toy also means you need to change another]
which is also used for managing more complex state in context but redux is for the greater complex. in order to use it we create another fucntion that will be used to update the state and then we pass it to the useReducer() as a second argument, and then we return the context provider with the value of the state and the dispatch function.
* (suggestion)in order to use the context we need to wrap the component that we want to use it in with the context provider and pass the value of the context as a prop to the provider.
After connecting the expenseReducer to the useReducer, likt useState it returns an array with the first value being the state and the second being the dispatch function, which we can use to update the state.
now to use the dispatch function, we add a function and pass it to the dispatch function, and then we can use the dispatch function to update the state.
in the end the useReducer is expected to return a new state in any given time, and the dispatch function is used to update the state.